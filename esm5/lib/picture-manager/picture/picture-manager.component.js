import { Component, Input, Output, EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
var PictureManagerComponent = /** @class */ (function () {
    function PictureManagerComponent(httpClient) {
        this.httpClient = httpClient;
        this.showDeleteOption = true;
        /**
         * Outputs
         * @param uploadChange: updates the image and returns the url for it.
         */
        this.uploadChange = new EventEmitter();
        this.response = new EventEmitter();
        this.drag_and_drop = false;
    }
    PictureManagerComponent.prototype.ngOnInit = function () {
        this.settingDefaultValues();
    };
    PictureManagerComponent.prototype.dragAndDropStyles = function (drag_and_drop) {
        this.drag_and_drop = drag_and_drop;
    };
    PictureManagerComponent.prototype.showPreview = function (image) {
        this.source = image;
        this.deleteUrl = this.deleteUrl || this.source;
        this.uploadChange.emit({ status_change: 'update', source: this.source });
    };
    PictureManagerComponent.prototype.delete = function () {
        var _this = this;
        var delete_url = this.creatDeleteUrl(this.source);
        this.httpClient.delete(delete_url, {
            headers: this.jamHeaders
        }).subscribe(function (response) {
            _this.uploadChange.emit({ status_change: 'delete', source: _this.source });
        });
    };
    PictureManagerComponent.prototype.settingDefaultValues = function () {
        this.type = this.type || 'square';
        this.deleteUrl = this.deleteUrl || this.source;
        this.uploadUrl = this.uploadUrl || this.source;
    };
    PictureManagerComponent.prototype.creatDeleteUrl = function (source) {
        var img_url_parties = source.split('/');
        var img_name = img_url_parties.pop();
        return this.deleteUrl + img_name;
    };
    PictureManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jam-picture-manager',
                    template: "<jam-upload [uploadUrl]=\"uploadUrl\" (dragAndDropChange)=\"dragAndDropStyles($event)\" (showPreview)=\"showPreview($event)\" mat-icon-button fxLayout=\"row\" fxLayoutAlign=\"center center\"\n    [jamHeaders]=\"jamHeaders\"\n    (response)=\"response.emit($event)\"\n    >\n    <div *ngIf=\"drag_and_drop\" [ngClass]=\"type + '-drag-and-drop-styles'\"></div>\n    <div *ngIf=\"!drag_and_drop\" id=\"picture-manager\" class=\"mouseover\">\n        <div [ngClass]=\"type\" [style.background-image]=\"'url(' + source + ')'\">\n            <div class=\"mouseover-child\">\n                <div class=\"blur\" [style.background-image]=\"'url(' + source + ')'\"></div>\n                <div class=\"overlay\"></div>\n                <div class=\"menu\">\n                    <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"8px\">\n                        <mat-icon matTooltip=\"Subir imagen\">add_a_photo</mat-icon>\n                        <mat-divider *ngIf=\"showDeleteOption\"></mat-divider>\n                        <jam-delete-confirmation *ngIf=\"showDeleteOption\"\n                            [styled]=\"{ color: 'white' }\"\n                            (delete)=\"delete()\"\n                        ></jam-delete-confirmation>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</jam-upload>\n",
                    styles: ["jam-upload #picture-manager *,jam-upload #picture-manager *>mat-icon{width:auto;height:auto}.square{border-radius:2%;overflow:hidden}.round{border-radius:50%;overflow:hidden}.round-drag-and-drop-styles{background-color:rgba(0,0,0,.05);position:relative;width:180px;height:180px;top:0;left:0;z-index:333;background-image:url(/assets/images/drag_and_drop.png);border-radius:50%}.square-drag-and-drop-styles{background-color:rgba(0,0,0,.05);position:relative;width:180px;height:180px;top:0;left:0;z-index:333;background-image:url(/assets/images/drag_and_drop.png)}jam-upload #picture-manager *>mat-icon{color:#fff;font-size:4.5rem}jam-upload #picture-manager.mouseover:hover{background-color:transparent}jam-upload #picture-manager.mouseover div>.mouseover-child{display:none;-webkit-transition:display .3s;transition:display .3s}jam-upload #picture-manager.mouseover:hover div>.mouseover-child{display:inherit}jam-upload #picture-manager.mouseover:hover div>.mouseover-child .blur{top:0;bottom:0;left:0;right:0;-webkit-filter:blur(10px);-moz-filter:blur(10px);-ms-filter:blur(10px);-o-filter:blur(10px);filter:blur(10px);width:calc(100% + 40px);height:calc(100% + 40px);position:absolute;z-index:1;margin:-20px}jam-upload #picture-manager div mat-divider{width:60%;position:relative;border-color:#fff}jam-upload #picture-manager div{width:180px;height:180px;position:relative;background-size:cover;background-position:center}jam-upload #picture-manager.mouseover div>.mouseover-child .menu{z-index:3;position:absolute;top:0}jam-upload #picture-manager div>div.overlay{top:0;bottom:0;left:0;right:0;width:100%;height:100%;position:absolute;z-index:1;background-color:rgba(0,0,0,.376)}"]
                },] },
    ];
    /** @nocollapse */
    PictureManagerComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PictureManagerComponent.propDecorators = {
        type: [{ type: Input }],
        source: [{ type: Input }],
        deleteUrl: [{ type: Input }],
        uploadUrl: [{ type: Input }],
        showDeleteOption: [{ type: Input }],
        jamHeaders: [{ type: Input }],
        uploadChange: [{ type: Output }],
        response: [{ type: Output }]
    };
    return PictureManagerComponent;
}());
export { PictureManagerComponent };
//# sourceMappingURL=data:application/json;base64,