import { Component, Input, Output, EventEmitter } from '@angular/core';
import { DatePipe } from '@angular/common';
const start_time = [0, 0, 0];
const end_time = [23, 59, 59];
export class RangeDatepickerComponent {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.startDateChange = new EventEmitter();
        this.endDateChange = new EventEmitter();
        this.updateDate = new EventEmitter();
    }
    ngOnInit() {
        this.label = 'Rango de fecha';
    }
    onDateInput(event) {
        this.lastDateInput = event.value;
        this.updateDateChange(this.lastDateInput.begin, this.lastDateInput.end);
    }
    onDateChange(event) {
        this.lastDateChange = event.value;
        this.updateDateChange(this.lastDateChange.begin, this.lastDateChange.end);
    }
    applyCustomRange(event, picker) {
        event.stopPropagation();
        picker.open();
    }
    applyLastWeek() {
        this.endDate = new Date();
        this.startDate = new Date();
        this.startDate.setDate(this.endDate.getDate() - 6);
        this.date = { begin: this.startDate, end: this.endDate };
        this.updateDateChange(this.startDate, this.endDate);
    }
    applyToday() {
        this.startDate = this.endDate = new Date();
        this.date = { begin: this.startDate, end: this.endDate };
        this.updateDateChange(this.startDate, this.endDate);
    }
    applyCurrentMonth() {
        let today = new Date();
        this.startDate = new Date(today.getFullYear(), today.getMonth(), 1);
        this.endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
        this.date = { begin: this.startDate, end: this.endDate };
        this.updateDateChange(this.startDate, this.endDate);
    }
    clearRange(event) {
        event.stopPropagation();
        this.date = null;
        this.updateDateChange(null, null);
        this.label = 'Rango de fecha';
    }
    applylastMonth() {
        let today = new Date();
        this.startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
        this.endDate = new Date(today.getFullYear(), today.getMonth(), 0);
        this.date = { begin: this.startDate, end: this.endDate };
        this.updateDateChange(this.startDate, this.endDate);
    }
    updateDateChange(start_date, end_date) {
        this.startDate = start_date;
        this.endDate = end_date;
        this.label = this.togglePreviewText(start_date, end_date);
        this.startDateChange.emit(this.formatDateAndAddTime(start_date, start_time));
        this.endDateChange.emit(this.formatDateAndAddTime(end_date, end_time));
        this.updateDate.emit();
    }
    togglePreviewText(start_date, end_date) {
        if (start_date && end_date) {
            return this.createPreviewText(start_date, end_date).toUpperCase();
        }
        if (start_date) {
            return this.getDays(start_date).toUpperCase();
        }
        if (end_date) {
            return this.getDays(end_date).toUpperCase();
        }
    }
    getDays(date) {
        let today = new Date();
        if (date.getDate() === today.getDate()) {
            return 'hoy';
        }
        return this.datePipe.transform(date, 'dd MMM yyyy');
    }
    createPreviewText(start_date, end_date) {
        if (start_date.getFullYear() !== end_date.getFullYear()) {
            return (this.datePipe.transform(start_date, 'dd MMM yyyy - ') +
                this.datePipe.transform(end_date, 'dd MMM yyyy'));
        }
        if (start_date.getMonth() === end_date.getMonth()) {
            if (this.compareDaysOfTheSameMonth())
                return this.getDays(start_date);
            return (this.datePipe.transform(start_date, 'dd - ') +
                this.datePipe.transform(end_date, 'dd') +
                this.datePipe.transform(end_date, ' MMM yyyy'));
        }
        return (this.datePipe.transform(start_date, 'dd MMM - ') +
            this.datePipe.transform(end_date, 'dd MMM') +
            this.datePipe.transform(end_date, ' yyyy'));
    }
    compareDaysOfTheSameMonth() {
        if (this.startDate.getDate() === this.endDate.getDate())
            return true;
    }
    formatDateAndAddTime(date, time) {
        date.setHours(time[0], time[1], time[2]);
        return date;
    }
}
RangeDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'jam-range-datepicker',
                template: `<mat-form-field [matTooltip]="label">
    <mat-select [placeholder]="label">
        <mat-option (click)="applyCustomRange($event, resultPicker); $event.stopPropagation()" fxLayout="row" fxLayoutAlign="space-between center">
            <sat-datepicker-toggle matPrefix [for]="resultPicker"></sat-datepicker-toggle>
            <input matInput
                placeholder="Rango personalizado"
                #resultPickerModel="ngModel"
                [satDatepicker]="resultPicker"
                [(ngModel)]="date"
                (dateInput)="onDateInput($event)"
                (dateChange)="onDateChange($event)">
            <sat-datepicker
                [disabled]="false"
                #resultPicker [rangeMode]="true">
            </sat-datepicker>

            <div matSuffix fxFlex="10">
                <button mat-icon-button matTooltip="Limpiar filtro" (click)="clearRange($event)">
                    <mat-icon>clear</mat-icon>
                </button>
            </div>
        </mat-option>

        <mat-option (click)="applyToday()">Hoy</mat-option>
        <mat-option (click)="applyLastWeek()">Ãšltima semana</mat-option>
        <mat-option (click)="applyCurrentMonth()">Este mes</mat-option>
        <mat-option (click)="applylastMonth()">El mes pasado</mat-option>
    </mat-select>
</mat-form-field>
`,
                providers: [DatePipe],
                styles: [`mat-form-field{font-size:15px}`]
            },] },
];
/** @nocollapse */
RangeDatepickerComponent.ctorParameters = () => [
    { type: DatePipe }
];
RangeDatepickerComponent.propDecorators = {
    startDate: [{ type: Input }],
    endDate: [{ type: Input }],
    startDateChange: [{ type: Output }],
    endDateChange: [{ type: Output }],
    updateDate: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,