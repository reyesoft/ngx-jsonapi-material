export class DynamicInput {
    constructor(key) {
        this.key = this.id = this.name = key;
    }
    setFocus() {
        this.focus = true;
        return this;
    }
    required() {
        this.templateOptions.required = true;
        return this;
    }
    fxFlex(value) {
        this.templateOptions.fxFlex = value;
        return this;
    }
    set(property, value) {
        this[property] = value;
        return this;
    }
    setTemplateOption(property, value) {
        this.templateOptions[property] = value;
        return this;
    }
    addTemplateOptions(template_options) {
        this.templateOptions = Object.assign({}, this.templateOptions, template_options);
        return this;
    }
    setTranslatedTemplateOptions(translateService) {
        return this;
    }
    load(fieldConfig) {
        for (let key in fieldConfig) {
            this[key] = fieldConfig[key];
        }
        return this;
    }
}
export class TextDynamicInput extends DynamicInput {
    constructor(key) {
        super(key);
        this.key = key;
        this.type = 'input';
        this.templateOptions = {
            placeholder: key
        };
    }
    setTranslatedTemplateOptions(translateService) {
        this.templateOptions.placeholder = translateService.instant(this.key);
        return this;
    }
}
export class NumberDynamicInput extends DynamicInput {
    constructor(key) {
        super(key);
        this.key = key;
        this.type = 'input';
        this.key = this.id = this.name = key;
        this.templateOptions = {
            type: 'number',
            step: 0.01,
            min: 0,
            placeholder: key
        };
    }
    setTranslatedTemplateOptions(translateService) {
        this.templateOptions.placeholder = translateService.instant(this.key);
        return this;
    }
}
export class CheckboxDynamicInput extends DynamicInput {
    constructor(key) {
        super(key);
        this.key = key;
        this.type = 'checkbox';
        this.templateOptions = {
            indeterminate: false,
            label: key
        };
    }
    setTranslatedTemplateOptions(translateService) {
        this.templateOptions.label = translateService.instant(this.key);
        return this;
    }
}
export class TextareaDynamicInput extends DynamicInput {
    constructor(key) {
        super(key);
        this.key = key;
        this.type = 'textarea';
        this.templateOptions = {
            matAutosizeMinRows: 2,
            matAutosizeMaxRows: 150,
            label: key
        };
    }
    setTranslatedTemplateOptions(translateService) {
        this.templateOptions.placeholder = translateService.instant(this.key);
        this.templateOptions.label = translateService.instant(this.key);
        return this;
    }
}
export class SelectDynamicInput extends DynamicInput {
    constructor(key) {
        super(key);
        this.key = key;
        this.type = 'select';
        this.templateOptions = {
            label: key,
            options: []
        };
    }
    setTranslatedTemplateOptions(translateService) {
        this.templateOptions.label = translateService.instant(this.key);
        return this;
    }
    setOptions(options) {
        this.templateOptions.options = options;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,